{
	"id": "75be4db2-5726-40d5-aefc-da2e0be865df",
	"name": "Job-bilby-backend",
	"allTests": [],
	"timestamp": "2017-09-17T06:20:29.576Z",
	"collection_id": "6062e727-b562-f231-e42d-8a0821e8d2e5",
	"folder_id": 0,
	"target_type": "collection",
	"environment_id": "a2fea03b-e880-f227-f203-9a102dc88851",
	"data": [],
	"delay": 0,
	"count": 10,
	"collection": {
		"id": "6062e727-b562-f231-e42d-8a0821e8d2e5",
		"name": "Job-bilby-backend",
		"description": "All working API calls for the job-bilby backend.",
		"order": [
			"ab28a038-2a52-56dd-4f6a-d9afe2188d68",
			"12fbcfae-2dc8-4240-41dd-ffc1069a83cb",
			"8e2d7397-2393-1a44-407a-56770f2c8618",
			"f4a300d1-fa5c-a891-3d66-66e7cea3b2b6",
			"83f6b3a7-4326-9361-a5e8-df35318c9d40",
			"b4e82f15-ade3-ba86-9a04-bbe2b6123ade",
			"5a7d7677-d323-b805-a054-b4344aa7e8b4",
			"0218a215-881d-9c23-35b4-c5d6dc34c2b8",
			"30e8887a-ce4c-c0df-f26a-87d5cc3270c0",
			"595f412e-fb5c-fa00-3e54-fbbd7b4ac62e",
			"86c075f8-a2e7-31d0-8ded-56674d0cb683",
			"d603abfd-0cfd-c2dc-b824-983550e41a5b",
			"41e7976f-88ab-6ffe-206f-3b0e321b291f",
			"56be25b9-f301-defc-7b2b-6eeeb955971b",
			"f57318e7-8e0d-c1ae-8e22-d6f454091330",
			"47237e3d-dae3-a680-5848-1ae49b03be68",
			"0ff05d60-ec67-d076-84cd-95239063e995",
			"7b570363-2d0d-a626-be8a-0c406f14b0be",
			"971f9faa-f1f5-5ccf-6a77-bc29596a4917",
			"aefcbc58-cacc-cc55-46a1-74eb2a208b3c",
			"7cb47793-ac36-3d6d-c3de-10add182d32a",
			"c038ff73-5ed9-efd0-65d3-c9156e134eeb"
		],
		"folders": [],
		"folders_order": [],
		"timestamp": 0,
		"synced": true,
		"remote_id": "0",
		"owner": "1836603",
		"sharedWithTeam": true,
		"subscribed": false,
		"remoteLink": null,
		"remoteLinkUpdatedAt": null,
		"public": false,
		"createdAt": "2017-08-22T01:39:04.000Z",
		"updatedAt": "2017-09-17T00:33:45.653Z",
		"write": true,
		"published": true,
		"favorite": false,
		"permissions": {
			"team": {
				"id": "61467",
				"access": "write"
			},
			"users": []
		},
		"syncedPermissions": {
			"team": {
				"id": "61467",
				"access": "write"
			},
			"users": []
		}
	},
	"folder": null,
	"environment": null,
	"globals": [
		{
			"enabled": true,
			"key": "job_user-token",
			"type": "text",
			"value": "Token e61a63c66028f44e4ae448d16d5ddc656eb825ea"
		},
		{
			"enabled": true,
			"key": "postman_api_key",
			"type": "text",
			"value": "12cc937bbee74591a358163f50310723"
		},
		{
			"enabled": true,
			"key": "backend_uid",
			"type": "text",
			"value": "6062e727-b562-f231-e42d-8a0821e8d2e5"
		}
	],
	"results": [
		{
			"name": "{{host}}/auth/",
			"id": "ab28a038-2a52-56dd-4f6a-d9afe2188d68",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"name": "Has a token",
				"status": "pass",
				"Token is correct": true,
				"Response Code 200": true
			},
			"testPassFailCounts": {
				"Has a token": {
					"pass": 10,
					"fail": 0
				},
				"Token is correct": {
					"pass": 10,
					"fail": 0
				},
				"Response Code 200": {
					"pass": 10,
					"fail": 0
				}
			},
			"times": [
				"963",
				"333",
				"336",
				"888",
				"339",
				"343",
				"983",
				"336",
				"335",
				"359"
			],
			"allTests": [
				{
					"Has a token": true,
					"Token is correct": true,
					"Response Code 200": true
				},
				{
					"name": "Has a token",
					"status": "pass",
					"Token is correct": true,
					"Response Code 200": true
				},
				{
					"name": "Has a token",
					"status": "pass",
					"Token is correct": true,
					"Response Code 200": true
				},
				{
					"name": "Has a token",
					"status": "pass",
					"Token is correct": true,
					"Response Code 200": true
				},
				{
					"name": "Has a token",
					"status": "pass",
					"Token is correct": true,
					"Response Code 200": true
				},
				{
					"name": "Has a token",
					"status": "pass",
					"Token is correct": true,
					"Response Code 200": true
				},
				{
					"name": "Has a token",
					"status": "pass",
					"Token is correct": true,
					"Response Code 200": true
				},
				{
					"name": "Has a token",
					"status": "pass",
					"Token is correct": true,
					"Response Code 200": true
				},
				{
					"name": "Has a token",
					"status": "pass",
					"Token is correct": true,
					"Response Code 200": true
				},
				{
					"name": "Has a token",
					"status": "pass",
					"Token is correct": true,
					"Response Code 200": true
				}
			],
			"time": "359",
			"totalRequestTime": "963333336888339343983336335359",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/auth/login/",
			"id": "12fbcfae-2dc8-4240-41dd-ffc1069a83cb",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"name": "Has a token",
				"status": "pass",
				"Token is correct": true,
				"Response Code 200": true
			},
			"testPassFailCounts": {
				"Has a token": {
					"pass": 10,
					"fail": 0
				},
				"Token is correct": {
					"pass": 10,
					"fail": 0
				},
				"Response Code 200": {
					"pass": 10,
					"fail": 0
				}
			},
			"times": [
				"348",
				"328",
				"322",
				"325",
				"327",
				"1226",
				"1296",
				"335",
				"334",
				"352"
			],
			"allTests": [
				{
					"Has a token": true,
					"Token is correct": true,
					"Response Code 200": true
				},
				{
					"name": "Has a token",
					"status": "pass",
					"Token is correct": true,
					"Response Code 200": true
				},
				{
					"name": "Has a token",
					"status": "pass",
					"Token is correct": true,
					"Response Code 200": true
				},
				{
					"name": "Has a token",
					"status": "pass",
					"Token is correct": true,
					"Response Code 200": true
				},
				{
					"name": "Has a token",
					"status": "pass",
					"Token is correct": true,
					"Response Code 200": true
				},
				{
					"name": "Has a token",
					"status": "pass",
					"Token is correct": true,
					"Response Code 200": true
				},
				{
					"name": "Has a token",
					"status": "pass",
					"Token is correct": true,
					"Response Code 200": true
				},
				{
					"name": "Has a token",
					"status": "pass",
					"Token is correct": true,
					"Response Code 200": true
				},
				{
					"name": "Has a token",
					"status": "pass",
					"Token is correct": true,
					"Response Code 200": true
				},
				{
					"name": "Has a token",
					"status": "pass",
					"Token is correct": true,
					"Response Code 200": true
				}
			],
			"time": "352",
			"totalRequestTime": "34832832232532712261296335334352",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/profiles/",
			"id": "8e2d7397-2393-1a44-407a-56770f2c8618",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"name": "Has profiles",
				"status": "pass",
				"Response Code 200": true
			},
			"testPassFailCounts": {
				"Has profiles": {
					"pass": 10,
					"fail": 0
				},
				"Response Code 200": {
					"pass": 10,
					"fail": 0
				}
			},
			"times": [
				"389",
				"382",
				"619",
				"479",
				"405",
				"394",
				"980",
				"497",
				"417",
				"1089"
			],
			"allTests": [
				{
					"Has profiles": true,
					"Response Code 200": true
				},
				{
					"name": "Has profiles",
					"status": "pass",
					"Response Code 200": true
				},
				{
					"name": "Has profiles",
					"status": "pass",
					"Response Code 200": true
				},
				{
					"name": "Has profiles",
					"status": "pass",
					"Response Code 200": true
				},
				{
					"name": "Has profiles",
					"status": "pass",
					"Response Code 200": true
				},
				{
					"name": "Has profiles",
					"status": "pass",
					"Response Code 200": true
				},
				{
					"name": "Has profiles",
					"status": "pass",
					"Response Code 200": true
				},
				{
					"name": "Has profiles",
					"status": "pass",
					"Response Code 200": true
				},
				{
					"name": "Has profiles",
					"status": "pass",
					"Response Code 200": true
				},
				{
					"name": "Has profiles",
					"status": "pass",
					"Response Code 200": true
				}
			],
			"time": "1089",
			"totalRequestTime": "3893826194794053949804974171089",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/profiles/{{profile_id}}/",
			"id": "f4a300d1-fa5c-a891-3d66-66e7cea3b2b6",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"name": "Has profiles",
				"status": "pass",
				"Returns correct user": false,
				"Response Code 200": true
			},
			"testPassFailCounts": {
				"Has profiles": {
					"pass": 10,
					"fail": 0
				},
				"Returns correct user": {
					"pass": 0,
					"fail": 10
				},
				"Response Code 200": {
					"pass": 10,
					"fail": 0
				}
			},
			"times": [
				"302",
				"300",
				"990",
				"294",
				"310",
				"312",
				"303",
				"305",
				"308",
				"971"
			],
			"allTests": [
				{
					"Has profiles": true,
					"Returns correct user": false,
					"Response Code 200": true
				},
				{
					"name": "Has profiles",
					"status": "pass",
					"Returns correct user": false,
					"Response Code 200": true
				},
				{
					"name": "Has profiles",
					"status": "pass",
					"Returns correct user": false,
					"Response Code 200": true
				},
				{
					"name": "Has profiles",
					"status": "pass",
					"Returns correct user": false,
					"Response Code 200": true
				},
				{
					"name": "Has profiles",
					"status": "pass",
					"Returns correct user": false,
					"Response Code 200": true
				},
				{
					"name": "Has profiles",
					"status": "pass",
					"Returns correct user": false,
					"Response Code 200": true
				},
				{
					"name": "Has profiles",
					"status": "pass",
					"Returns correct user": false,
					"Response Code 200": true
				},
				{
					"name": "Has profiles",
					"status": "pass",
					"Returns correct user": false,
					"Response Code 200": true
				},
				{
					"name": "Has profiles",
					"status": "pass",
					"Returns correct user": false,
					"Response Code 200": true
				},
				{
					"name": "Has profiles",
					"status": "pass",
					"Returns correct user": false,
					"Response Code 200": true
				}
			],
			"time": "971",
			"totalRequestTime": "302300990294310312303305308971",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/profiles/create/",
			"id": "83f6b3a7-4326-9361-a5e8-df35318c9d40",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"name": "Response Code 200",
				"status": "fail"
			},
			"testPassFailCounts": {
				"Response Code 200": {
					"pass": 0,
					"fail": 10
				}
			},
			"times": [
				"293",
				"286",
				"1292",
				"288",
				"287",
				"776",
				"292",
				"294",
				"293",
				"1286"
			],
			"allTests": [
				{
					"Response Code 200": false
				},
				{
					"name": "Response Code 200",
					"status": "fail"
				},
				{
					"name": "Response Code 200",
					"status": "fail"
				},
				{
					"name": "Response Code 200",
					"status": "fail"
				},
				{
					"name": "Response Code 200",
					"status": "fail"
				},
				{
					"name": "Response Code 200",
					"status": "fail"
				},
				{
					"name": "Response Code 200",
					"status": "fail"
				},
				{
					"name": "Response Code 200",
					"status": "fail"
				},
				{
					"name": "Response Code 200",
					"status": "fail"
				},
				{
					"name": "Response Code 200",
					"status": "fail"
				}
			],
			"time": "1286",
			"totalRequestTime": "29328612922882877762922942931286",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/tasks/",
			"id": "b4e82f15-ade3-ba86-9a04-bbe2b6123ade",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"name": "Has an owner",
				"status": "pass",
				"Has a user ID": true,
				"Has a user": true,
				"Has a last name": false,
				"Has skills": true
			},
			"testPassFailCounts": {
				"Has an owner": {
					"pass": 10,
					"fail": 0
				},
				"Has a user ID": {
					"pass": 10,
					"fail": 0
				},
				"Has a user": {
					"pass": 10,
					"fail": 0
				},
				"Has a last name": {
					"pass": 0,
					"fail": 10
				},
				"Has skills": {
					"pass": 10,
					"fail": 0
				}
			},
			"times": [
				"610",
				"805",
				"1504",
				"585",
				"629",
				"2339",
				"1123",
				"1129",
				"1498",
				"1308"
			],
			"allTests": [
				{
					"Has an owner": true,
					"Has a user ID": true,
					"Has a user": true,
					"Has a last name": false,
					"Has skills": true
				},
				{
					"name": "Has an owner",
					"status": "pass",
					"Has a user ID": true,
					"Has a user": true,
					"Has a last name": false,
					"Has skills": true
				},
				{
					"name": "Has an owner",
					"status": "pass",
					"Has a user ID": true,
					"Has a user": true,
					"Has a last name": false,
					"Has skills": true
				},
				{
					"name": "Has an owner",
					"status": "pass",
					"Has a user ID": true,
					"Has a user": true,
					"Has a last name": false,
					"Has skills": true
				},
				{
					"name": "Has an owner",
					"status": "pass",
					"Has a user ID": true,
					"Has a user": true,
					"Has a last name": false,
					"Has skills": true
				},
				{
					"name": "Has an owner",
					"status": "pass",
					"Has a user ID": true,
					"Has a user": true,
					"Has a last name": false,
					"Has skills": true
				},
				{
					"name": "Has an owner",
					"status": "pass",
					"Has a user ID": true,
					"Has a user": true,
					"Has a last name": false,
					"Has skills": true
				},
				{
					"name": "Has an owner",
					"status": "pass",
					"Has a user ID": true,
					"Has a user": true,
					"Has a last name": false,
					"Has skills": true
				},
				{
					"name": "Has an owner",
					"status": "pass",
					"Has a user ID": true,
					"Has a user": true,
					"Has a last name": false,
					"Has skills": true
				},
				{
					"name": "Has an owner",
					"status": "pass",
					"Has a user ID": true,
					"Has a user": true,
					"Has a last name": false,
					"Has skills": true
				}
			],
			"time": "1308",
			"totalRequestTime": "610805150458562923391123112914981308",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/tasks/?location=Melbourne",
			"id": "5a7d7677-d323-b805-a054-b4344aa7e8b4",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"name": "Has a location",
				"status": "pass",
				"Location is Melbourne": true,
				"Location not Sydney": true
			},
			"testPassFailCounts": {
				"Has a location": {
					"pass": 10,
					"fail": 0
				},
				"Location is Melbourne": {
					"pass": 10,
					"fail": 0
				},
				"Location not Sydney": {
					"pass": 10,
					"fail": 0
				}
			},
			"times": [
				"330",
				"979",
				"311",
				"303",
				"308",
				"880",
				"321",
				"325",
				"982",
				"292"
			],
			"allTests": [
				{
					"Has a location": true,
					"Location is Melbourne": true,
					"Location not Sydney": true
				},
				{
					"name": "Has a location",
					"status": "pass",
					"Location is Melbourne": true,
					"Location not Sydney": true
				},
				{
					"name": "Has a location",
					"status": "pass",
					"Location is Melbourne": true,
					"Location not Sydney": true
				},
				{
					"name": "Has a location",
					"status": "pass",
					"Location is Melbourne": true,
					"Location not Sydney": true
				},
				{
					"name": "Has a location",
					"status": "pass",
					"Location is Melbourne": true,
					"Location not Sydney": true
				},
				{
					"name": "Has a location",
					"status": "pass",
					"Location is Melbourne": true,
					"Location not Sydney": true
				},
				{
					"name": "Has a location",
					"status": "pass",
					"Location is Melbourne": true,
					"Location not Sydney": true
				},
				{
					"name": "Has a location",
					"status": "pass",
					"Location is Melbourne": true,
					"Location not Sydney": true
				},
				{
					"name": "Has a location",
					"status": "pass",
					"Location is Melbourne": true,
					"Location not Sydney": true
				},
				{
					"name": "Has a location",
					"status": "pass",
					"Location is Melbourne": true,
					"Location not Sydney": true
				}
			],
			"time": "292",
			"totalRequestTime": "330979311303308880321325982292",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/tasks/?location=Sydney&search=edwards",
			"id": "0218a215-881d-9c23-35b4-c5d6dc34c2b8",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"name": "Has a location",
				"status": "pass",
				"Has a user": true,
				"User is searched user": false,
				"Location is Melbourne": true,
				"Location not Sydney": true
			},
			"testPassFailCounts": {
				"Has a location": {
					"pass": 10,
					"fail": 0
				},
				"Has a user": {
					"pass": 10,
					"fail": 0
				},
				"User is searched user": {
					"pass": 0,
					"fail": 10
				},
				"Location is Melbourne": {
					"pass": 10,
					"fail": 0
				},
				"Location not Sydney": {
					"pass": 10,
					"fail": 0
				}
			},
			"times": [
				"660",
				"1293",
				"507",
				"487",
				"299",
				"305",
				"306",
				"304",
				"1294",
				"285"
			],
			"allTests": [
				{
					"Has a location": true,
					"Has a user": true,
					"User is searched user": false,
					"Location is Melbourne": true,
					"Location not Sydney": true
				},
				{
					"name": "Has a location",
					"status": "pass",
					"Has a user": true,
					"User is searched user": false,
					"Location is Melbourne": true,
					"Location not Sydney": true
				},
				{
					"name": "Has a location",
					"status": "pass",
					"Has a user": true,
					"User is searched user": false,
					"Location is Melbourne": true,
					"Location not Sydney": true
				},
				{
					"name": "Has a location",
					"status": "pass",
					"Has a user": true,
					"User is searched user": false,
					"Location is Melbourne": true,
					"Location not Sydney": true
				},
				{
					"name": "Has a location",
					"status": "pass",
					"Has a user": true,
					"User is searched user": false,
					"Location is Melbourne": true,
					"Location not Sydney": true
				},
				{
					"name": "Has a location",
					"status": "pass",
					"Has a user": true,
					"User is searched user": false,
					"Location is Melbourne": true,
					"Location not Sydney": true
				},
				{
					"name": "Has a location",
					"status": "pass",
					"Has a user": true,
					"User is searched user": false,
					"Location is Melbourne": true,
					"Location not Sydney": true
				},
				{
					"name": "Has a location",
					"status": "pass",
					"Has a user": true,
					"User is searched user": false,
					"Location is Melbourne": true,
					"Location not Sydney": true
				},
				{
					"name": "Has a location",
					"status": "pass",
					"Has a user": true,
					"User is searched user": false,
					"Location is Melbourne": true,
					"Location not Sydney": true
				},
				{
					"name": "Has a location",
					"status": "pass",
					"Has a user": true,
					"User is searched user": false,
					"Location is Melbourne": true,
					"Location not Sydney": true
				}
			],
			"time": "285",
			"totalRequestTime": "66012935074872993053063041294285",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/tasks/?skills=php,python&search=hugo",
			"id": "30e8887a-ce4c-c0df-f26a-87d5cc3270c0",
			"totalTime": 0,
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": {
					"name": "Not Found",
					"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
				}
			},
			"testPassFailCounts": {},
			"times": [
				"1008",
				"869",
				"286",
				"286",
				"283",
				"290",
				"291",
				"292",
				"872",
				"269"
			],
			"allTests": [
				{},
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null
			],
			"time": "269",
			"totalRequestTime": "1008869286286283290291292872269",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/tasks/create/",
			"id": "595f412e-fb5c-fa00-3e54-fbbd7b4ac62e",
			"totalTime": 0,
			"responseCode": {
				"code": 201,
				"name": "Created",
				"detail": {
					"name": "Created",
					"detail": "The request has been fulfilled and resulted in a new resource being created."
				}
			},
			"tests": {
				"name": "Has skills",
				"status": "pass",
				"Task owner has first name": false
			},
			"testPassFailCounts": {
				"Has skills": {
					"pass": 10,
					"fail": 0
				},
				"Task owner has first name": {
					"pass": 0,
					"fail": 10
				}
			},
			"times": [
				"1296",
				"317",
				"313",
				"316",
				"320",
				"592",
				"335",
				"502",
				"353",
				"301"
			],
			"allTests": [
				{
					"Has skills": true,
					"Task owner has first name": false
				},
				{
					"name": "Has skills",
					"status": "pass",
					"Task owner has first name": false
				},
				{
					"name": "Has skills",
					"status": "pass",
					"Task owner has first name": false
				},
				{
					"name": "Has skills",
					"status": "pass",
					"Task owner has first name": false
				},
				{
					"name": "Has skills",
					"status": "pass",
					"Task owner has first name": false
				},
				{
					"name": "Has skills",
					"status": "pass",
					"Task owner has first name": false
				},
				{
					"name": "Has skills",
					"status": "pass",
					"Task owner has first name": false
				},
				{
					"name": "Has skills",
					"status": "pass",
					"Task owner has first name": false
				},
				{
					"name": "Has skills",
					"status": "pass",
					"Task owner has first name": false
				},
				{
					"name": "Has skills",
					"status": "pass",
					"Task owner has first name": false
				}
			],
			"time": "301",
			"totalRequestTime": "1296317313316320592335502353301",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/tasks/helper/?status=AP",
			"id": "86c075f8-a2e7-31d0-8ded-56674d0cb683",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"name": "Has helper",
				"status": "pass",
				"Task profile ID correct": true,
				"Task has status AP": true
			},
			"testPassFailCounts": {
				"Has helper": {
					"pass": 10,
					"fail": 0
				},
				"Task profile ID correct": {
					"pass": 10,
					"fail": 0
				},
				"Task has status AP": {
					"pass": 10,
					"fail": 0
				}
			},
			"times": [
				"875",
				"299",
				"299",
				"305",
				"300",
				"317",
				"316",
				"319",
				"315",
				"285"
			],
			"allTests": [
				{
					"Has helper": true,
					"Task profile ID correct": true,
					"Task has status AP": true
				},
				{
					"name": "Has helper",
					"status": "pass",
					"Task profile ID correct": true,
					"Task has status AP": true
				},
				{
					"name": "Has helper",
					"status": "pass",
					"Task profile ID correct": true,
					"Task has status AP": true
				},
				{
					"name": "Has helper",
					"status": "pass",
					"Task profile ID correct": true,
					"Task has status AP": true
				},
				{
					"name": "Has helper",
					"status": "pass",
					"Task profile ID correct": true,
					"Task has status AP": true
				},
				{
					"name": "Has helper",
					"status": "pass",
					"Task profile ID correct": true,
					"Task has status AP": true
				},
				{
					"name": "Has helper",
					"status": "pass",
					"Task profile ID correct": true,
					"Task has status AP": true
				},
				{
					"name": "Has helper",
					"status": "pass",
					"Task profile ID correct": true,
					"Task has status AP": true
				},
				{
					"name": "Has helper",
					"status": "pass",
					"Task profile ID correct": true,
					"Task has status AP": true
				},
				{
					"name": "Has helper",
					"status": "pass",
					"Task profile ID correct": true,
					"Task has status AP": true
				}
			],
			"time": "285",
			"totalRequestTime": "875299299305300317316319315285",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/tasks/poster/?status=O",
			"id": "d603abfd-0cfd-c2dc-b824-983550e41a5b",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"name": "Task owner ID correct",
				"status": "pass",
				"Task has status AP": true
			},
			"testPassFailCounts": {
				"Task owner ID correct": {
					"pass": 10,
					"fail": 0
				},
				"Task has status AP": {
					"pass": 10,
					"fail": 0
				}
			},
			"times": [
				"313",
				"328",
				"549",
				"342",
				"352",
				"556",
				"350",
				"548",
				"384",
				"352"
			],
			"allTests": [
				{
					"Task owner ID correct": true,
					"Task has status AP": true
				},
				{
					"name": "Task owner ID correct",
					"status": "pass",
					"Task has status AP": true
				},
				{
					"name": "Task owner ID correct",
					"status": "pass",
					"Task has status AP": true
				},
				{
					"name": "Task owner ID correct",
					"status": "pass",
					"Task has status AP": true
				},
				{
					"name": "Task owner ID correct",
					"status": "pass",
					"Task has status AP": true
				},
				{
					"name": "Task owner ID correct",
					"status": "pass",
					"Task has status AP": true
				},
				{
					"name": "Task owner ID correct",
					"status": "pass",
					"Task has status AP": true
				},
				{
					"name": "Task owner ID correct",
					"status": "pass",
					"Task has status AP": true
				},
				{
					"name": "Task owner ID correct",
					"status": "pass",
					"Task has status AP": true
				},
				{
					"name": "Task owner ID correct",
					"status": "pass",
					"Task has status AP": true
				}
			],
			"time": "352",
			"totalRequestTime": "313328549342352556350548384352",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/tasks/shortlist/",
			"id": "41e7976f-88ab-6ffe-206f-3b0e321b291f",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"name": "Correct task shortlisted",
				"status": "fail",
				"Task has status SL": true
			},
			"testPassFailCounts": {
				"Correct task shortlisted": {
					"pass": 0,
					"fail": 10
				},
				"Task has status SL": {
					"pass": 10,
					"fail": 0
				}
			},
			"times": [
				"289",
				"290",
				"287",
				"290",
				"1257",
				"302",
				"296",
				"995",
				"300",
				"439"
			],
			"allTests": [
				{
					"Correct task shortlisted": false,
					"Task has status SL": true
				},
				{
					"name": "Correct task shortlisted",
					"status": "fail",
					"Task has status SL": true
				},
				{
					"name": "Correct task shortlisted",
					"status": "fail",
					"Task has status SL": true
				},
				{
					"name": "Correct task shortlisted",
					"status": "fail",
					"Task has status SL": true
				},
				{
					"name": "Correct task shortlisted",
					"status": "fail",
					"Task has status SL": true
				},
				{
					"name": "Correct task shortlisted",
					"status": "fail",
					"Task has status SL": true
				},
				{
					"name": "Correct task shortlisted",
					"status": "fail",
					"Task has status SL": true
				},
				{
					"name": "Correct task shortlisted",
					"status": "fail",
					"Task has status SL": true
				},
				{
					"name": "Correct task shortlisted",
					"status": "fail",
					"Task has status SL": true
				},
				{
					"name": "Correct task shortlisted",
					"status": "fail",
					"Task has status SL": true
				}
			],
			"time": "439",
			"totalRequestTime": "2892902872901257302296995300439",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/tasks/start/",
			"id": "56be25b9-f301-defc-7b2b-6eeeb955971b",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"name": "Task has status I",
				"status": "fail"
			},
			"testPassFailCounts": {
				"Task has status I": {
					"pass": 0,
					"fail": 10
				}
			},
			"times": [
				"287",
				"286",
				"286",
				"519",
				"1084",
				"293",
				"297",
				"1287",
				"297",
				"284"
			],
			"allTests": [
				{
					"Task has status I": false
				},
				{
					"name": "Task has status I",
					"status": "fail"
				},
				{
					"name": "Task has status I",
					"status": "fail"
				},
				{
					"name": "Task has status I",
					"status": "fail"
				},
				{
					"name": "Task has status I",
					"status": "fail"
				},
				{
					"name": "Task has status I",
					"status": "fail"
				},
				{
					"name": "Task has status I",
					"status": "fail"
				},
				{
					"name": "Task has status I",
					"status": "fail"
				},
				{
					"name": "Task has status I",
					"status": "fail"
				},
				{
					"name": "Task has status I",
					"status": "fail"
				}
			],
			"time": "284",
			"totalRequestTime": "28728628651910842932971287297284",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/tasks/discard/",
			"id": "f57318e7-8e0d-c1ae-8e22-d6f454091330",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"name": "Task has status D or has already been discarded",
				"status": "pass"
			},
			"testPassFailCounts": {
				"Task has status D or has already been discarded": {
					"pass": 10,
					"fail": 0
				}
			},
			"times": [
				"292",
				"436",
				"291",
				"444",
				"1316",
				"542",
				"303",
				"883",
				"297",
				"279"
			],
			"allTests": [
				{
					"Task has status D or has already been discarded": true
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "pass"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "pass"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "pass"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "pass"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "pass"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "pass"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "pass"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "pass"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "pass"
				}
			],
			"time": "279",
			"totalRequestTime": "2924362914441316542303883297279",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/tasks/apply/",
			"id": "47237e3d-dae3-a680-5848-1ae49b03be68",
			"totalTime": 0,
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": {
					"name": "Not Found",
					"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
				}
			},
			"tests": {
				"name": "Task has status AP or isn't available",
				"status": "fail"
			},
			"testPassFailCounts": {
				"Task has status AP or isn't available": {
					"pass": 0,
					"fail": 10
				}
			},
			"times": [
				"287",
				"284",
				"287",
				"1026",
				"305",
				"299",
				"293",
				"403",
				"299",
				"283"
			],
			"allTests": [
				{
					"Task has status AP or isn't available": false
				},
				{
					"name": "Task has status AP or isn't available",
					"status": "fail"
				},
				{
					"name": "Task has status AP or isn't available",
					"status": "fail"
				},
				{
					"name": "Task has status AP or isn't available",
					"status": "fail"
				},
				{
					"name": "Task has status AP or isn't available",
					"status": "fail"
				},
				{
					"name": "Task has status AP or isn't available",
					"status": "fail"
				},
				{
					"name": "Task has status AP or isn't available",
					"status": "fail"
				},
				{
					"name": "Task has status AP or isn't available",
					"status": "fail"
				},
				{
					"name": "Task has status AP or isn't available",
					"status": "fail"
				},
				{
					"name": "Task has status AP or isn't available",
					"status": "fail"
				}
			],
			"time": "283",
			"totalRequestTime": "2872842871026305299293403299283",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/tasks/complete/",
			"id": "0ff05d60-ec67-d076-84cd-95239063e995",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"name": "Task has status C or isn't available",
				"status": "fail"
			},
			"testPassFailCounts": {
				"Task has status C or isn't available": {
					"pass": 0,
					"fail": 10
				}
			},
			"times": [
				"284",
				"286",
				"285",
				"1091",
				"296",
				"405",
				"294",
				"594",
				"293",
				"286"
			],
			"allTests": [
				{
					"Task has status C or isn't available": false
				},
				{
					"name": "Task has status C or isn't available",
					"status": "fail"
				},
				{
					"name": "Task has status C or isn't available",
					"status": "fail"
				},
				{
					"name": "Task has status C or isn't available",
					"status": "fail"
				},
				{
					"name": "Task has status C or isn't available",
					"status": "fail"
				},
				{
					"name": "Task has status C or isn't available",
					"status": "fail"
				},
				{
					"name": "Task has status C or isn't available",
					"status": "fail"
				},
				{
					"name": "Task has status C or isn't available",
					"status": "fail"
				},
				{
					"name": "Task has status C or isn't available",
					"status": "fail"
				},
				{
					"name": "Task has status C or isn't available",
					"status": "fail"
				}
			],
			"time": "286",
			"totalRequestTime": "2842862851091296405294594293286",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/tasks/{{task_id}}/applicants/",
			"id": "7b570363-2d0d-a626-be8a-0c406f14b0be",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"tests": {
				"name": "Task has applicants",
				"status": "pass"
			},
			"testPassFailCounts": {
				"Task has applicants": {
					"pass": 10,
					"fail": 0
				}
			},
			"times": [
				"324",
				"318",
				"326",
				"1316",
				"340",
				"333",
				"569",
				"328",
				"332",
				"310"
			],
			"allTests": [
				{
					"Task has applicants": true
				},
				{
					"name": "Task has applicants",
					"status": "pass"
				},
				{
					"name": "Task has applicants",
					"status": "pass"
				},
				{
					"name": "Task has applicants",
					"status": "pass"
				},
				{
					"name": "Task has applicants",
					"status": "pass"
				},
				{
					"name": "Task has applicants",
					"status": "pass"
				},
				{
					"name": "Task has applicants",
					"status": "pass"
				},
				{
					"name": "Task has applicants",
					"status": "pass"
				},
				{
					"name": "Task has applicants",
					"status": "pass"
				},
				{
					"name": "Task has applicants",
					"status": "pass"
				}
			],
			"time": "310",
			"totalRequestTime": "3243183261316340333569328332310",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/tasks/{{task_id}}/accept",
			"id": "971f9faa-f1f5-5ccf-6a77-bc29596a4917",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"name": "Helper and owner are not null",
				"status": "pass",
				"Status should be in progress": false
			},
			"testPassFailCounts": {
				"Helper and owner are not null": {
					"pass": 10,
					"fail": 0
				},
				"Status should be in progress": {
					"pass": 0,
					"fail": 10
				}
			},
			"times": [
				"294",
				"298",
				"481",
				"292",
				"301",
				"300",
				"1012",
				"300",
				"298",
				"456"
			],
			"allTests": [
				{
					"Helper and owner are not null": true,
					"Status should be in progress": false
				},
				{
					"name": "Helper and owner are not null",
					"status": "pass",
					"Status should be in progress": false
				},
				{
					"name": "Helper and owner are not null",
					"status": "pass",
					"Status should be in progress": false
				},
				{
					"name": "Helper and owner are not null",
					"status": "pass",
					"Status should be in progress": false
				},
				{
					"name": "Helper and owner are not null",
					"status": "pass",
					"Status should be in progress": false
				},
				{
					"name": "Helper and owner are not null",
					"status": "pass",
					"Status should be in progress": false
				},
				{
					"name": "Helper and owner are not null",
					"status": "pass",
					"Status should be in progress": false
				},
				{
					"name": "Helper and owner are not null",
					"status": "pass",
					"Status should be in progress": false
				},
				{
					"name": "Helper and owner are not null",
					"status": "pass",
					"Status should be in progress": false
				},
				{
					"name": "Helper and owner are not null",
					"status": "pass",
					"Status should be in progress": false
				}
			],
			"time": "456",
			"totalRequestTime": "2942984812923013001012300298456",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/tasks/{{task_id}}/rate/",
			"id": "aefcbc58-cacc-cc55-46a1-74eb2a208b3c",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"name": "Helper and owner are not null",
				"status": "pass",
				"Status should be in progress": false
			},
			"testPassFailCounts": {
				"Helper and owner are not null": {
					"pass": 10,
					"fail": 0
				},
				"Status should be in progress": {
					"pass": 0,
					"fail": 10
				}
			},
			"times": [
				"290",
				"300",
				"686",
				"301",
				"302",
				"302",
				"1290",
				"531",
				"295",
				"281"
			],
			"allTests": [
				{
					"Helper and owner are not null": true,
					"Status should be in progress": false
				},
				{
					"name": "Helper and owner are not null",
					"status": "pass",
					"Status should be in progress": false
				},
				{
					"name": "Helper and owner are not null",
					"status": "pass",
					"Status should be in progress": false
				},
				{
					"name": "Helper and owner are not null",
					"status": "pass",
					"Status should be in progress": false
				},
				{
					"name": "Helper and owner are not null",
					"status": "pass",
					"Status should be in progress": false
				},
				{
					"name": "Helper and owner are not null",
					"status": "pass",
					"Status should be in progress": false
				},
				{
					"name": "Helper and owner are not null",
					"status": "pass",
					"Status should be in progress": false
				},
				{
					"name": "Helper and owner are not null",
					"status": "pass",
					"Status should be in progress": false
				},
				{
					"name": "Helper and owner are not null",
					"status": "pass",
					"Status should be in progress": false
				},
				{
					"name": "Helper and owner are not null",
					"status": "pass",
					"Status should be in progress": false
				}
			],
			"time": "281",
			"totalRequestTime": "2903006863013023021290531295281",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/tasks/reject",
			"id": "7cb47793-ac36-3d6d-c3de-10add182d32a",
			"totalTime": 0,
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": {
					"name": "Not Found",
					"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
				}
			},
			"tests": {
				"name": "Task has status D or has already been discarded",
				"status": "fail"
			},
			"testPassFailCounts": {
				"Task has status D or has already been discarded": {
					"pass": 0,
					"fail": 10
				}
			},
			"times": [
				"286",
				"505",
				"1016",
				"284",
				"1323",
				"296",
				"984",
				"296",
				"294",
				"273"
			],
			"allTests": [
				{
					"Task has status D or has already been discarded": false
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "fail"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "fail"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "fail"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "fail"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "fail"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "fail"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "fail"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "fail"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "fail"
				}
			],
			"time": "273",
			"totalRequestTime": "28650510162841323296984296294273",
			"iterationResults": {}
		},
		{
			"name": "{{host}}/tasks/shortlist_application",
			"id": "c038ff73-5ed9-efd0-65d3-c9156e134eeb",
			"totalTime": 0,
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": {
					"name": "Not Found",
					"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
				}
			},
			"tests": {
				"name": "Task has status D or has already been discarded",
				"status": "fail"
			},
			"testPassFailCounts": {
				"Task has status D or has already been discarded": {
					"pass": 0,
					"fail": 10
				}
			},
			"times": [
				"296",
				"588",
				"1295",
				"286",
				"298",
				"668",
				"584",
				"296",
				"305",
				"662"
			],
			"allTests": [
				{
					"Task has status D or has already been discarded": false
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "fail"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "fail"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "fail"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "fail"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "fail"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "fail"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "fail"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "fail"
				},
				{
					"name": "Task has status D or has already been discarded",
					"status": "fail"
				}
			],
			"time": "662",
			"totalRequestTime": "2965881295286298668584296305662",
			"iterationResults": {}
		}
	],
	"totalPass": 320,
	"totalFail": 130,
	"totalTime": 111806,
	"lifecycle": "done",
	"requests": [
		{
			"name": "{{host}}/auth/",
			"id": "ab28a038-2a52-56dd-4f6a-d9afe2188d68",
			"url": "job-bilby-dev.herokuapp.com/auth/",
			"time": "359",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Has a token": {
					"pass": 10,
					"fail": 0
				},
				"Token is correct": {
					"pass": 10,
					"fail": 0
				},
				"Response Code 200": {
					"pass": 10,
					"fail": 0
				}
			}
		},
		{
			"name": "{{host}}/auth/login/",
			"id": "12fbcfae-2dc8-4240-41dd-ffc1069a83cb",
			"url": "job-bilby-dev.herokuapp.com/auth/login/",
			"time": "352",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Has a token": {
					"pass": 10,
					"fail": 0
				},
				"Token is correct": {
					"pass": 10,
					"fail": 0
				},
				"Response Code 200": {
					"pass": 10,
					"fail": 0
				}
			}
		},
		{
			"name": "{{host}}/profiles/",
			"id": "8e2d7397-2393-1a44-407a-56770f2c8618",
			"url": "job-bilby-dev.herokuapp.com/profiles/",
			"time": "1089",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Has profiles": {
					"pass": 10,
					"fail": 0
				},
				"Response Code 200": {
					"pass": 10,
					"fail": 0
				}
			}
		},
		{
			"name": "{{host}}/profiles/{{profile_id}}/",
			"id": "f4a300d1-fa5c-a891-3d66-66e7cea3b2b6",
			"url": "job-bilby-dev.herokuapp.com/profiles/12/",
			"time": "971",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Has profiles": {
					"pass": 10,
					"fail": 0
				},
				"Returns correct user": {
					"pass": 0,
					"fail": 10
				},
				"Response Code 200": {
					"pass": 10,
					"fail": 0
				}
			}
		},
		{
			"name": "{{host}}/profiles/create/",
			"id": "83f6b3a7-4326-9361-a5e8-df35318c9d40",
			"url": "job-bilby-dev.herokuapp.com/profiles/create/",
			"time": "1286",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Response Code 200": {
					"pass": 0,
					"fail": 10
				}
			}
		},
		{
			"name": "{{host}}/tasks/",
			"id": "b4e82f15-ade3-ba86-9a04-bbe2b6123ade",
			"url": "job-bilby-dev.herokuapp.com/tasks/",
			"time": "1308",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Has an owner": {
					"pass": 10,
					"fail": 0
				},
				"Has a user ID": {
					"pass": 10,
					"fail": 0
				},
				"Has a user": {
					"pass": 10,
					"fail": 0
				},
				"Has a last name": {
					"pass": 0,
					"fail": 10
				},
				"Has skills": {
					"pass": 10,
					"fail": 0
				}
			}
		},
		{
			"name": "{{host}}/tasks/?location=Melbourne",
			"id": "5a7d7677-d323-b805-a054-b4344aa7e8b4",
			"url": "job-bilby-dev.herokuapp.com/tasks/?location=Melbourne",
			"time": "292",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Has a location": {
					"pass": 10,
					"fail": 0
				},
				"Location is Melbourne": {
					"pass": 10,
					"fail": 0
				},
				"Location not Sydney": {
					"pass": 10,
					"fail": 0
				}
			}
		},
		{
			"name": "{{host}}/tasks/?location=Sydney&search=edwards",
			"id": "0218a215-881d-9c23-35b4-c5d6dc34c2b8",
			"url": "job-bilby-dev.herokuapp.com/tasks/?location=Sydney&search=edwards",
			"time": "285",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Has a location": {
					"pass": 10,
					"fail": 0
				},
				"Has a user": {
					"pass": 10,
					"fail": 0
				},
				"User is searched user": {
					"pass": 0,
					"fail": 10
				},
				"Location is Melbourne": {
					"pass": 10,
					"fail": 0
				},
				"Location not Sydney": {
					"pass": 10,
					"fail": 0
				}
			}
		},
		{
			"name": "{{host}}/tasks/?skills=php,python&search=hugo",
			"id": "30e8887a-ce4c-c0df-f26a-87d5cc3270c0",
			"url": "job-bilby-dev.herokuapp.com/tasks/?skills=php,python&search=hugo",
			"time": "269",
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": {
					"name": "Not Found",
					"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
				}
			},
			"testPassFailCounts": {}
		},
		{
			"name": "{{host}}/tasks/create/",
			"id": "595f412e-fb5c-fa00-3e54-fbbd7b4ac62e",
			"url": "job-bilby-dev.herokuapp.com/tasks/create/",
			"time": "301",
			"responseCode": {
				"code": 201,
				"name": "Created",
				"detail": {
					"name": "Created",
					"detail": "The request has been fulfilled and resulted in a new resource being created."
				}
			},
			"testPassFailCounts": {
				"Has skills": {
					"pass": 10,
					"fail": 0
				},
				"Task owner has first name": {
					"pass": 0,
					"fail": 10
				}
			}
		},
		{
			"name": "{{host}}/tasks/helper/?status=AP",
			"id": "86c075f8-a2e7-31d0-8ded-56674d0cb683",
			"url": "job-bilby-dev.herokuapp.com/tasks/helper/?status=AP",
			"time": "285",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Has helper": {
					"pass": 10,
					"fail": 0
				},
				"Task profile ID correct": {
					"pass": 10,
					"fail": 0
				},
				"Task has status AP": {
					"pass": 10,
					"fail": 0
				}
			}
		},
		{
			"name": "{{host}}/tasks/poster/?status=O",
			"id": "d603abfd-0cfd-c2dc-b824-983550e41a5b",
			"url": "job-bilby-dev.herokuapp.com/tasks/poster/?status=O",
			"time": "352",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Task owner ID correct": {
					"pass": 10,
					"fail": 0
				},
				"Task has status AP": {
					"pass": 10,
					"fail": 0
				}
			}
		},
		{
			"name": "{{host}}/tasks/shortlist/",
			"id": "41e7976f-88ab-6ffe-206f-3b0e321b291f",
			"url": "job-bilby-dev.herokuapp.com/tasks/shortlist/",
			"time": "439",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Correct task shortlisted": {
					"pass": 0,
					"fail": 10
				},
				"Task has status SL": {
					"pass": 10,
					"fail": 0
				}
			}
		},
		{
			"name": "{{host}}/tasks/start/",
			"id": "56be25b9-f301-defc-7b2b-6eeeb955971b",
			"url": "job-bilby-dev.herokuapp.com/tasks/start/",
			"time": "284",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Task has status I": {
					"pass": 0,
					"fail": 10
				}
			}
		},
		{
			"name": "{{host}}/tasks/discard/",
			"id": "f57318e7-8e0d-c1ae-8e22-d6f454091330",
			"url": "job-bilby-dev.herokuapp.com/tasks/discard/",
			"time": "279",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Task has status D or has already been discarded": {
					"pass": 10,
					"fail": 0
				}
			}
		},
		{
			"name": "{{host}}/tasks/apply/",
			"id": "47237e3d-dae3-a680-5848-1ae49b03be68",
			"url": "job-bilby-dev.herokuapp.com/tasks/apply/",
			"time": "283",
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": {
					"name": "Not Found",
					"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
				}
			},
			"testPassFailCounts": {
				"Task has status AP or isn't available": {
					"pass": 0,
					"fail": 10
				}
			}
		},
		{
			"name": "{{host}}/tasks/complete/",
			"id": "0ff05d60-ec67-d076-84cd-95239063e995",
			"url": "job-bilby-dev.herokuapp.com/tasks/complete/",
			"time": "286",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Task has status C or isn't available": {
					"pass": 0,
					"fail": 10
				}
			}
		},
		{
			"name": "{{host}}/tasks/{{task_id}}/applicants/",
			"id": "7b570363-2d0d-a626-be8a-0c406f14b0be",
			"url": "job-bilby-dev.herokuapp.com/tasks/11/applicants/",
			"time": "310",
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": {
					"name": "OK",
					"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
				}
			},
			"testPassFailCounts": {
				"Task has applicants": {
					"pass": 10,
					"fail": 0
				}
			}
		},
		{
			"name": "{{host}}/tasks/{{task_id}}/accept",
			"id": "971f9faa-f1f5-5ccf-6a77-bc29596a4917",
			"url": "job-bilby-dev.herokuapp.com/tasks/11/accept/",
			"time": "456",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Helper and owner are not null": {
					"pass": 10,
					"fail": 0
				},
				"Status should be in progress": {
					"pass": 0,
					"fail": 10
				}
			}
		},
		{
			"name": "{{host}}/tasks/{{task_id}}/rate/",
			"id": "aefcbc58-cacc-cc55-46a1-74eb2a208b3c",
			"url": "job-bilby-dev.herokuapp.com/tasks/11/rate/",
			"time": "281",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Helper and owner are not null": {
					"pass": 10,
					"fail": 0
				},
				"Status should be in progress": {
					"pass": 0,
					"fail": 10
				}
			}
		},
		{
			"name": "{{host}}/tasks/reject",
			"id": "7cb47793-ac36-3d6d-c3de-10add182d32a",
			"url": "job-bilby-dev.herokuapp.com/tasks/reject/",
			"time": "273",
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": {
					"name": "Not Found",
					"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
				}
			},
			"testPassFailCounts": {
				"Task has status D or has already been discarded": {
					"pass": 0,
					"fail": 10
				}
			}
		},
		{
			"name": "{{host}}/tasks/shortlist_application",
			"id": "c038ff73-5ed9-efd0-65d3-c9156e134eeb",
			"url": "job-bilby-dev.herokuapp.com/tasks/shortlist_application/",
			"time": "662",
			"responseCode": {
				"code": 404,
				"name": "Not Found",
				"detail": {
					"name": "Not Found",
					"detail": "The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible."
				}
			},
			"testPassFailCounts": {
				"Task has status D or has already been discarded": {
					"pass": 0,
					"fail": 10
				}
			}
		}
	],
	"synced": false
}